<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift docs on InstaCoding</title>
    <link>https://pqteru.github.io/categories/swift-docs/</link>
    <description>Recent content in swift docs on InstaCoding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 26 Jan 2021 21:37:19 +0800</lastBuildDate><atom:link href="https://pqteru.github.io/categories/swift-docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Subscripts 的兩三事</title>
      <link>https://pqteru.github.io/posts/2021-01-26-swift-subscripts/</link>
      <pubDate>Tue, 26 Jan 2021 21:37:19 +0800</pubDate>
      
      <guid>https://pqteru.github.io/posts/2021-01-26-swift-subscripts/</guid>
      <description>下標腳本的特性：
 可定義在類別（class）、結構（structure）和列舉（enumeration） 可自行實作並用來存取 collecitons, list or sequences 元素的捷徑 可簡寫成 somearray[index] 單一個目標內可以定義多個 subscripts  下標腳本語法 語法範例
// 一般 stored property 的寫法 subscript(index: Int) -&amp;gt; Int { get { } // newValue 為 setter 的預設帶入值 set(newValue) { } } // read-only computed property 也可以直接寫 subscript(index: Int) -&amp;gt; Int { ... } // 調用的時候就可簡寫成 somearray[0] somearray[1] 下標腳本用法 可在 collecitons, list or sequences 自行定義存取的方式，例如 Swift 的 dictionary 就實作了通過下標腳本來對其實例中存放的值進行存取
var numberOfLegs = [&amp;#34;spider&amp;#34;: 8, &amp;#34;ant&amp;#34;: 6, &amp;#34;cat&amp;#34;: 4] numberOfLegs[&amp;#34;bird&amp;#34;] = 2 下標腳本選項 Subscripts 定義的方式類似於 functions</description>
    </item>
    
    <item>
      <title>Swift Functions 的兩三事</title>
      <link>https://pqteru.github.io/posts/2021-01-22-swift-functions/</link>
      <pubDate>Fri, 22 Jan 2021 17:21:09 +0800</pubDate>
      
      <guid>https://pqteru.github.io/posts/2021-01-22-swift-functions/</guid>
      <description>Swift 的 functions 可以有很多種寫法，非常彈性，支援參數標籤、預設參數、不限參數數量、in-out 跟多載
// 最一般的寫法 func fooBar() -&amp;gt; String { return &amp;#34;foo bar&amp;#34; } // 甚至可以不寫 return func fooBar() -&amp;gt; String { &amp;#34;foo bar&amp;#34; } 參數標籤 參數前面都可以自訂標籤，在呼叫的該 func 時，xcode 會自動帶出前述標籤，如果想省略也可改為 _ 底線
// 參數標籤可以自定義 func fooBar(with params: Int) { } fooBar(label: 1) // 省略標籤 func fooBar(_ params: Int) { } fooBar(1) 預設參數值 可在 func 的參數設定預設值，在呼叫時就可省略不寫
func fooBar(with params: Int = 1) { } fooBar() 不限數量的參數 (Variadic) 如果需要用到一串很長且重複類型的參數也可以這樣寫 e.g., Int.</description>
    </item>
    
    <item>
      <title>Swift Properties 的兩三事</title>
      <link>https://pqteru.github.io/posts/2021-01-18-swift-properties/</link>
      <pubDate>Mon, 18 Jan 2021 10:10:08 +0800</pubDate>
      
      <guid>https://pqteru.github.io/posts/2021-01-18-swift-properties/</guid>
      <description>TL;DR, 簡單做個整理 Property 的分類與特性：
 Stored 保存變量或常量的屬性 Computed 單純用來運算不做保存的屬性， 可自訂 setter, getter 定義屬性要設定或取得的值 可使用 willSet, didSet 來觀察或執行 set 前後可做的事 可使用 @propertyWrapper 的語法糖來包裝邏輯並減少代碼重複  Stored Properties Stored Property 是作為特定 classes 或 strucutres 的實例的一部分存儲的常量或變量。 存儲屬性可以是 mutable 存儲屬性（由 var 關鍵字引入）或 const 存儲屬性（由 let 關鍵字引入）。
建立一個 Person 的 struct
struct Person { var weight: Double // kg var height: Double // cm } 這邊我們定義的 model 是 struct，要注意若使用 let 來定義的話，他的 property 就無法被存取，會有 error 產生，這是因為 struct 是 value type，只要 instance 是定量，則他的 properties 也都會是，就算標記為 var 也一樣</description>
    </item>
    
    <item>
      <title>Struct vs Class in Swift</title>
      <link>https://pqteru.github.io/posts/2021-01-17-struct-vs-class-in-swift/</link>
      <pubDate>Sun, 17 Jan 2021 09:37:34 +0800</pubDate>
      
      <guid>https://pqteru.github.io/posts/2021-01-17-struct-vs-class-in-swift/</guid>
      <description>Structures struct 跟 enum 是 value type instance, value type 是指當被 assign 到 constant 或 variable，或當作參數傳遞到 function 時，他的值是被 copied 過去的，在 swift 裡面 intergers, floating-point numbers, booleans, strings, arrays and dictionaries 皆為 value type
struct SWeather { var location: String var minTemp: Double var maxTemp: Double } let s = SWeather(location: &amp;#34;Taipei&amp;#34;, minTemp: 12, maxTemp: 15) 接著定義一個 ss 來 assign to s
var ss = s ss.minTemp = 10 # 設 minTemp 為 10 output:</description>
    </item>
    
  </channel>
</rss>
